grammar;


pub file: () = {
    FunctionDef,
}


Boolean: () = {
    "true",
    "false",
};


Number : () = {
    r"\d+(\.\d+)([eE][+-]?\d+)?",
    r"\d+",
}

Identifier : () = {
    r"([_a-z]+)([0-9a-zA-z_]*)",
}

SimpleExp : () = {
    "(" Exp ")",
    "(" ")",
    Boolean,
    Number,
    Identifier,
    SimpleExp "." "(" Exp ")",
}

pub Exp : () = {

  #[precedence(level="1")]
    SimpleExp,

  #[precedence(level="2")] 
   "not" Exp,
   "Array.create" SimpleExp SimpleExp,
   
   // This is an argument list. Splitting this
   // off into its own rule would be better but
   // I can't resolve the conflicts
  #[precedence(level="3")] 
   Exp SimpleExp, 


  #[precedence(level="4")] #[assoc(side="right")]
   "-" Exp,
   "-." Exp,

  #[precedence(level="5")] #[assoc(side="left")]
   Exp "+" Exp,
   Exp "-" Exp,
   Exp "+." Exp,
   Exp "-." Exp,

  #[precedence(level="6")] #[assoc(side="left")]
   Exp "<>" Exp,
   Exp "=" Exp,
   Exp "<" Exp,
   Exp ">" Exp,
   Exp "<=" Exp,
   Exp ">=" Exp,

    // These are multiple elements. Again, splitting
    // this off would be better but...
  #[precedence(level="7")]  #[assoc(side="left")]
  Exp "," Exp, 

  #[precedence(level="8")] 
  "if" Exp "then" Exp "else" Exp,

  #[precedence(level="9")] 
  "let" Identifier "=" Exp "in" Exp,

  #[precedence(level="10")] 
  "let" "rec" FunctionDef "in" Exp,
  "let" "(" Pat ")" "=" Exp "in" Exp,
  SimpleExp "." "(" Exp ")" "<-" Exp,
  #[assoc(side="right")]
  Exp ";" Exp,

}

ActualArgs : () = {
    SimpleExp,
    ActualArgs SimpleExp,
}

FunctionDef : () = { 
    Identifier FormalArgs "=" Exp,
}

Pat : () = {
    Pat "," Identifier,
    Identifier "," Identifier,
}


FormalArgs : () = { 
    Identifier FormalArgs,
    Identifier,
}











