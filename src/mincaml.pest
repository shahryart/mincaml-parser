space = _{ " " | "\t" | "\n" | "\r" }
digit = { ASCII_DIGIT }
lower = { ASCII_ALPHA_LOWER }
upper = { ASCII_ALPHA_UPPER }

lparen = { "(" }
rparen = { ")" }
boolean = { "true" | "false" }

operator = { 
    "+."
    | "+"
    | "*."
    | "/."
    | "<>"
    | "<="
    | ">="
    | "<"
    | ">"
    }

minus =  { "-" }
not = { "not" }
minus_dot = { "-." }
equal = { "=" }

if_string = { "if" }
then_string = { "then" }
else_string = { "else" }
let_string = { "let" }
in_string = { "in" }
rec_string = { "rec" }

comma = { "," }
underscore = { "_" }
array_create = { "Array.create" }
dot = { "." }
less_minus = { "<-" }
semicolon = { ";" }


integer = { digit+ }
floating = { digit+ ~ ("." ~ digit*)? ~ (("e" | "E") ~ ("+" | "-")? ~ digit+)?}


identifier = { underscore | lower ~ (digit | lower | upper | "_")* }

simple_exp = { 
     lparen ~ exp ~ rparen 
     | lparen ~ rparen 
     | boolean 
     | integer 
     | floating 
     | identifier 
     | simple_exp ~ dot ~ lparen ~ exp ~ rparen 
     }

exp = {
    simple_exp
    | not ~ exp
    | minus ~ exp
    | exp ~ minus ~ exp
    | exp ~ operator ~ exp
    | exp ~ minus_dot ~ exp
    | exp ~ actual_args
    | elems

    | if_string ~ exp ~ then_string ~ exp ~ else_string ~ exp

    | let_string ~ lparen ~ pat ~ rparen ~ equal ~ exp ~ in_string ~ exp
    | let_string ~ rec_string ~ function_def ~ in_string ~ exp

    | simple_exp ~ dot ~ lparen ~ exp ~ rparen ~ less_minus ~ exp
    | exp ~ semicolon ~ exp
    | array_create ~ simple_exp ~ simple_exp
    }

function_def = { identifier ~ formal_args ~ equal ~ exp }

formal_args = { identifier ~ formal_args | identifier }

actual_args = { actual_args ~ simple_exp | simple_exp }

elems = { elems ~ comma ~ exp | exp ~ comma ~ exp }

pat = { pat ~ comma ~ identifier | identifier ~ comma ~ identifier }

